---
services:
  grafana:
    image: grafana/grafana:10.4.3
    container_name: grafana
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: 472:1000
    # ports:
    #   - 3000:3000
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls=true
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.docker.network=proxy
    volumes:
      - ${STORAGE}/grafana/data/:/var/lib/grafana
    networks:
      - proxy
      - monitoramento

  loki:
    image: grafana/loki
    container_name: loki
    restart: unless-stopped
    # ports:
    #   - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ${STORAGE}/config/loki/loki.yml:/etc/loki/local-config.yaml
    networks:
      - proxy
      - monitoramento

  speedtest-tracker:
    image: lscr.io/linuxserver/speedtest-tracker:latest
    container_name: speedtest-tracker
    # ports:
    #     - 8105:80
    environment:
      - PUID=1000
      - PGID=1000
      - DB_CONNECTION=sqlite
      - PUBLIC_DASHBOARD=true
    volumes:
      - ${STORAGE}/speedtest:/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.speedtest.rule=Host(`speedtest.${DOMAIN}`)
      - traefik.http.routers.speedtest.entrypoints=websecure
      - traefik.http.routers.speedtest.tls=true
      - traefik.http.services.speedtest.loadbalancer.server.port=80
    networks:
      - proxy
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Sao_Paulo
    volumes:
      - ${STORAGE}/heimdall/config:/config
    # ports:
    #   - 8106:80
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.heimdall.rule=Host(`heimdall.${DOMAIN}`)
      - traefik.http.routers.heimdall.entrypoints=websecure
      - traefik.http.routers.heimdall.tls=true
      - traefik.http.services.heimdall.loadbalancer.server.port=80
    networks:
      - proxy

  telegraf:
    image: telegraf
    container_name: telegraf
    restart: always
    user: telegraf:985
    privileged: true
    # user: root
    hostname: homelab
    # privileged: true
    # command: apt-get update && apt-get install -y smartmontools lm-sensors && telegraf
    volumes:
      - ${STORAGE}/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro # - /dev/sda:/dev/sda:rw
      - /proc:/host/proc:ro
      - /var/run/utmp:/var/run/utmp:ro
      - /dev:/dev:ro
      - /srv:/srv:ro
    environment:
      - HOST_PROC=/host/proc
      - HOST_PROC_MOUNTINFO=/proc/1
    depends_on:
      - influxdb
    # ports:
    # - '8125:8125'
    networks:
      - monitoramento

  influxdb:
    image: influxdb:2-alpine
    container_name: influxdb
    restart: always
    # ports:
    #   - '8086:8086'
    volumes:
      - ${STORAGE}/influx/influxdb:/var/lib/influxdb2
      - ${STORAGE}/influx/config:/etc/influxdb
    labels:
      - traefik.enable=true
      - traefik.http.routers.influxdb.rule=Host(`influxdb.${DOMAIN}`)
      - traefik.http.routers.influxdb.entrypoints=websecure
      - traefik.http.routers.influxdb.tls=true
      - traefik.http.services.influxdb.loadbalancer.server.port=8086
      - traefik.docker.network=proxy
    networks:
      - proxy
      - monitoramento

  uptime-kuma:
    image: louislam/uptime-kuma:1-alpine
    container_name: uptime-kuma
    volumes:
      - ${STORAGE}/uptime:/app/data
    restart: always
    # ports:
    #   - 3001:3001
    labels:
      - traefik.enable=true
      - traefik.http.routers.uptime.rule=Host(`uptime.${DOMAIN}`)
      - traefik.http.routers.uptime.entrypoints=websecure
      - traefik.http.routers.uptime.tls=true
      - traefik.http.services.uptime.loadbalancer.server.port=3001
    networks:
      - proxy

  diun:
    image: crazymax/diun:latest
    command: serve
    container_name: diun
    volumes:
      - ${STORAGE}/dium/data:/data
      - ${STORAGE}/dium/diun.yml:/diun.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ}
      - LOG_LEVEL=info
      - LOG_JSON=false
    restart: always

networks:
  proxy:
    external: true
  monitoramento:
    external: false
